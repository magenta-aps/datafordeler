version: '3.5'
services:
  datafordeler:
    container_name: datafordeler
    image: datafordeler:latest
    build:
      context: .
      dockerfile: docker/Dockerfile
    depends_on:
      - datafordeler-db
    env_file:
      - ./docker/dev-env/datafordeler.env
    volumes:
      - ./docker/dev-env/application:/app/dev-env/local
      - ./plugin/cpr/src/test/resources/GLBASETEST:/app/dev-env/local/cpr/download/d170608.l534902
      - ./plugin/cpr/src/test/resources/GLBASETEST2:/app/dev-env/local/cpr/download/d170610.l534901
      - ./plugin/cvr/src/test/resources/company_in.json:/app/dev-env/local/cvr/company_in.json
      - ./plugin/cvr/src/test/resources/unit.json:/app/dev-env/local/cvr/unit.json
      - ./plugin/cvr/src/test/resources/person.json:/app/dev-env/local/cvr/person.json
      - ./plugin/geo/src/test/resources/municipality.json:/app/dev-env/local/geo/municipality.json
      - ./plugin/geo/src/test/resources/locality.json:/app/dev-env/local/geo/locality.json
      - ./plugin/geo/src/test/resources/post.json:/app/dev-env/local/geo/post.json
      - ./plugin/geo/src/test/resources/road.json:/app/dev-env/local/geo/road.json
      - ./plugin/geo/src/test/resources/access.json:/app/dev-env/local/geo/access.json
      - ./plugin/geo/src/test/resources/unit.json:/app/dev-env/local/geo/unit.json
      - ./plugin/geo/src/test/resources/building.json:/app/dev-env/local/geo/building.json
    ports:
      - 8081:80
      - 5005:5005
    command: [
      "java",
      "-Dloader.path=/dist/plugin/jar/",
      "--add-opens", "java.base/java.net=ALL-UNNAMED",
      "--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED",
      "-Xms128M", "-Xmx4096M",
      "-Dterminal.jline=false", "-Dterminal.ansi=true",
      "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005",
      "-cp", "datafordeler-core-exec.jar",
      "org.springframework.boot.loader.PropertiesLauncher"
    ]

  datafordeler-db:
    container_name: datafordeler-db
    build:
      context: .
      dockerfile: docker/Dockerfile.sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=testTEST1
    volumes:
      - ./docker/dev-env/local:/app/dev-env/local
      - ./docker/dev-env/db/initiate-db.sql:/app/initiate-db.sql
      - ./docker/manual_initiate.sh:/app/manual_initiate.sh

  test:
    profiles:
      - donotstart
    image: datafordeler:latest
    build:
      context: .
      dockerfile: docker/Dockerfile
    environment:
      - DATABASE_CLASS=org.h2.Driver
      - DATABASE_URL=jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE;INIT=CREATE SCHEMA IF NOT EXISTS DBO
      - DATABASE_DIALECT=org.hibernate.dialect.H2Dialect
      - DATABASE_SHOW_SQL="false"
      - DATABASE_USERNAME=sa
      - DATABASE_PASSWORD=testTEST1
      - DATABASE_METHOD=create
      - DATABASE_DEFAULT_SCHEMA=dbo
      - SECONDARY_DATABASE_CLASS=org.h2.Driver
      - SECONDARY_DATABASE_URL=jdbc:h2:mem:db2;DB_CLOSE_DELAY=-1;MVCC=TRUE;INIT=CREATE SCHEMA IF NOT EXISTS DBO
      - SECONDARY_DATABASE_DIALECT=org.hibernate.dialect.H2Dialect
      - SECONDARY_DATABASE_SHOW_SQL="false"
      - SECONDARY_DATABASE_USERNAME=sa
      - SECONDARY_DATABASE_PASSWORD=testTEST1
      - SECONDARY_DATABASE_METHOD=create
      - SECONDARY_DATABASE_DEFAULT_SCHEMA=dbo
    ports:
      - 8082:80
    command: bash -c "cd /code/plugin/cpr && mvn --batch-mode -T 2C test"
    #use docker-compose up test to execute tests

  openapi:
    build:
      context: .
      dockerfile: docker/Dockerfile.openapi
    ports:
      - "8080:8080"


volumes:
  datafordeler-gl:
