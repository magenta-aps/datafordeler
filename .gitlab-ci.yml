stages:
  - build
  - test
  - release

# https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
.if-default-branch-refs: &if-default-branch-refs
  if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.if-tag: &if-tag
  if: '$CI_COMMIT_TAG'

.if-merge-request: &if-merge-request
  if: '$CI_MERGE_REQUEST_IID'

# Workflow
###########
workflow:
  rules:
    - <<: *if-tag
      variables:
        # Override the IMAGE_SHA variable on tag pipelines to avoid both the default
        # branch pipeline and tag pipeline overriding each other's images arbitrarily when
        # they are both running at the same time on master.
        IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    - <<: *if-default-branch-refs
    - <<: *if-merge-request


include:
  - project: "labs/salt-automation"
    file:
      - "/gitlab-ci-templates/common/rules.v1.yml"
      - "/gitlab-ci-templates/common/saltbert.v1.yml"
      - "/gitlab-ci-templates/common/docker-build-meta.v2.yml"
      - "/gitlab-ci-templates/common/docker-release-meta.v1.yml"

variables:
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/datafordeler

  DAFO_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/datafordeler:${CI_COMMIT_SHA}
  DAFO_IMAGE_TAG: magentaaps/datafordeler:${CI_COMMIT_TAG}

  DAFOSQL_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/datafordeler-test-db:${CI_COMMIT_SHA}
  DAFOSQL_IMAGE_TAG: magentaaps/datafordeler-test-db:${CI_COMMIT_TAG}

  DAFODOC_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/datafordeler_doc:${CI_COMMIT_SHA}
  DAFODOC_IMAGE_TAG: magentaaps/datafordeler_doc:${CI_COMMIT_TAG}
# Build stage
#############

.build-default: &build-default
  stage: build
  tags:
    - docker
  image:
    # We use the `:debug` image as it contains `sh` needed by gitlab-ci.
    name: gcr.io/kaniko-project/executor:v1.15.0-debug
    entrypoint: [ "" ]

build-mssql-image:
  <<: *build-default
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context=${CI_PROJECT_DIR}
      --dockerfile=${CI_PROJECT_DIR}/docker/Dockerfile.sqlserver
      --destination=${DAFOSQL_IMAGE_SHA}
      --cache=true

build-image:
  <<: *build-default
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context=${CI_PROJECT_DIR}
      --dockerfile=${CI_PROJECT_DIR}/docker/Dockerfile
      --destination=${DAFO_IMAGE_SHA}
      --cache=true

build-openapi-image:
  <<: *build-default
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context=${CI_PROJECT_DIR}
      --dockerfile=${CI_PROJECT_DIR}/docker/Dockerfile.openapi
      --destination=${DAFODOC_IMAGE_SHA}
      --cache=true


 # Test stage 
 #############
 
.test-default: &test-default
  stage: test
  needs:
    - build-mssql-image
    - build-image
  image: ${DAFO_IMAGE_SHA}
  variables:
    GIT_STRATEGY: none
    JAVA_OPTS: "-Duser.timezone=Europe/Copenhagen"
    #M$ sql variables
    ACCEPT_EULA: "Y"
    SA_PASSWORD: "testTEST1"

    DATABASE_CLASS: "org.h2.Driver"
    DATABASE_URL: "jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE;INIT=CREATE SCHEMA IF NOT EXISTS DBO"
    DATABASE_DIALECT: "org.hibernate.dialect.H2Dialect"
    DATABASE_SHOW_SQL: "false"
    DATABASE_USERNAME: "sa"
    DATABASE_PASSWORD: "testTEST1"
    DATABASE_METHOD: "create"
    DATABASE_DEFAULT_SCHEMA: "dbo"

    SECONDARY_DATABASE_CLASS: "org.h2.Driver"
    SECONDARY_DATABASE_URL: "jdbc:h2:mem:db2;DB_CLOSE_DELAY=-1;MVCC=TRUE;INIT=CREATE SCHEMA IF NOT EXISTS DBO"
    SECONDARY_DATABASE_DIALECT: "org.hibernate.dialect.H2Dialect"
    SECONDARY_DATABASE_SHOW_SQL: "false"
    SECONDARY_DATABASE_USERNAME: "sa"
    SECONDARY_DATABASE_PASSWORD: "testTEST1"
    SECONDARY_DATABASE_METHOD: "create"
    SECONDARY_DATABASE_DEFAULT_SCHEMA: "dbo"

  tags:
    - docker
  services:
    - name: ${DAFOSQL_IMAGE_SHA}
      alias: datafordeler-db


test-core:
  <<: *test-default
  before_script:
    - cd /code/core
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit:
        - /code/core/target/surefire-reports/*.xml

test-cpr:
  <<: *test-default
  before_script:
    - cd /code/plugin/cpr
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit:
        - /code/plugin/cpr/target/surefire-reports/TEST-*

test-cvr:
  <<: *test-default
  before_script:
    - cd /code/plugin/cvr
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit: target/surefire-reports/*.xml

test-eboks:
  <<: *test-default
  before_script:
    - cd /code/plugin/eboks
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit:
        - /code/plugin/eboks/target/surefire-reports/*.xml

test-eskat:
  <<: *test-default
  before_script:
    - cd /code/plugin/eskat
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit:
        - /code/plugin/eskat/target/surefire-reports/*.xml

test-geo:
  <<: *test-default
  before_script:
    - cd /code/plugin/geo
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit:
        - /code/plugin/geo/target/surefire-reports/*.xml

test-ger:
  <<: *test-default
  before_script:
    - cd /code/plugin/ger
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit:
        - /code/plugin/ger/target/surefire-reports/*.xml

test-prisme:
  <<: *test-default
  before_script:
    - cd /code/plugin/prisme
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit:
        - /code/plugin/prisme/target/surefire-reports/*.xml

test-combinedPitu:
  <<: *test-default
  before_script:
    - cd /code/plugin/combinedPitu
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit:
        - /code/plugin/pituCombined/target/surefire-reports/TEST-*.xml

test-statistik:
  <<: *test-default
  before_script:
    - cd /code/plugin/statistik
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit:
        - /code/plugin/statistik/target/surefire-reports/*.xml

test-subscription:
  <<: *test-default
  before_script:
    - cd /code/plugin/subscription
  script:
    - mvn --batch-mode -T 2C test
  artifacts:
    reports:
      junit: /code/plugin/subscription/target/surefire-reports/*.xml

 # Release stage
 ###############
 
.release:
  stage: release
  image: alpine
  needs: ["test-core", "test-cpr", "test-cvr", "test-eboks", "test-eskat", "test-geo", "test-ger", "test-prisme", "test-combinedPitu", "test-statistik","test-subscription"]
  variables:
    GIT_STRATEGY: none # We do not need the source code
  before_script:
    - apk add skopeo

Release Datafordeler image:
  extends:
    - .rules:semver-all
    - .release
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${DAFO_IMAGE_SHA}"
      "docker://${DAFO_IMAGE_TAG}"

Release Datafordeler-test-db image:
  extends:
    - .rules:semver-all
    - .release
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${DAFOSQL_IMAGE_SHA}"
      "docker://${DAFOSQL_IMAGE_TAG}"
