stages:
  - build
  - test
  - release
  - configure
  - deploy

# https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
.if-default-branch-refs: &if-default-branch-refs
  if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.if-tag: &if-tag
  if: '$CI_COMMIT_TAG'

.if-merge-request: &if-merge-request
  if: '$CI_MERGE_REQUEST_IID'

# Workflow
###########
workflow:
  rules:
    - <<: *if-tag
      variables:
        # Override the IMAGE_SHA variable on tag pipelines to avoid both the default
        # branch pipeline and tag pipeline overriding each other's images arbitrarily when
        # they are both running at the same time on master.
        IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    - <<: *if-default-branch-refs
    - <<: *if-merge-request


include:
  - project: "labs/salt-automation"
    file:
      - "/gitlab-ci-templates/common/rules.v1.yml"
      - "/gitlab-ci-templates/common/saltbert.v1.yml"
      - "/gitlab-ci-templates/common/docker-build-meta.v2.yml"
      - "/gitlab-ci-templates/common/docker-release-meta.v1.yml"
      - "/gitlab-ci-templates/common/config-updater-meta.v1.yml"
      - "/gitlab-ci-templates/common/conventional-commits-meta.v1.yml"
      - "/gitlab-ci-templates/common/conventional-commits-changelog-meta.v1.yml"

variables:
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/datafordeler

  DAFO_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/datafordeler:${CI_COMMIT_SHA}
  DAFO_IMAGE_TAG: magentaaps/datafordeler:${CI_COMMIT_TAG}

  DAFOSQL_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/datafordeler-test-db:${CI_COMMIT_SHA}
  DAFOSQL_IMAGE_TAG: magentaaps/datafordeler-test-db:${CI_COMMIT_TAG}

  DAFODOC_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/datafordeler_doc:${CI_COMMIT_SHA}
  DAFODOC_IMAGE_TAG: magentaaps/datafordeler_doc:${CI_COMMIT_TAG}
# Build stage
#############
build-mssql-image:
  extends: .build-docker
  variables:
    CI_IMAGE: ${DAFOSQL_IMAGE_SHA}
    DOCKERFILE: ${CI_PROJECT_DIR}/docker/Dockerfile.sqlserver

build-image:
  extends: .build-docker
  variables:
    CI_IMAGE: ${DAFO_IMAGE_SHA}
    DOCKERFILE: ${CI_PROJECT_DIR}/docker/Dockerfile

build-openapi-image:
  extends: .build-docker
  variables:
    CI_IMAGE: ${DAFODOC_IMAGE_SHA}
    DOCKERFILE: ${CI_PROJECT_DIR}/docker/Dockerfile.openapi


 # Test stage 
 #############
 
.test-default: &test-default
  stage: test
  needs:
    - build-mssql-image
    - build-image
  image: ${DAFO_IMAGE_SHA}
  variables:
    GIT_STRATEGY: none
    JAVA_OPTS: "-Duser.timezone=Europe/Copenhagen"
    #M$ sql variables
    ACCEPT_EULA: "Y"
    SA_PASSWORD: "testTEST1"
    SERVERNAME: "dafodev"
    SERVER_PORT: "80"

    DATABASE_CLASS: "org.h2.Driver"
    DATABASE_URL: "jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE;INIT=CREATE SCHEMA IF NOT EXISTS DBO"
    DATABASE_DIALECT: "org.hibernate.dialect.H2Dialect"
    DATABASE_SHOW_SQL: "false"
    DATABASE_USERNAME: "sa"
    DATABASE_PASSWORD: "testTEST1"
    DATABASE_METHOD: "create-drop"
    DATABASE_DEFAULT_SCHEMA: "dbo"

    SECONDARY_DATABASE_CLASS: "org.h2.Driver"
    SECONDARY_DATABASE_URL: "jdbc:h2:mem:db2;DB_CLOSE_DELAY=-1;MVCC=TRUE;INIT=CREATE SCHEMA IF NOT EXISTS DBO"
    SECONDARY_DATABASE_DIALECT: "org.hibernate.dialect.H2Dialect"
    SECONDARY_DATABASE_SHOW_SQL: "false"
    SECONDARY_DATABASE_USERNAME: "sa"
    SECONDARY_DATABASE_PASSWORD: "testTEST1"
    SECONDARY_DATABASE_METHOD: "create-drop"
    SECONDARY_DATABASE_DEFAULT_SCHEMA: "dbo"

    SSL_ENABLE: "false"
    
    USER_DATABASE_ENABLED: "false"
    USER_DATABASE_SECURITY_DISABLED: "false"
    USER_DATABASE_URL: "jdbc:sqlserver://datafordeler-db:1433;databaseName=Datafordeler"
    USER_DATABASE_USERNAME: "sa"
    USER_DATABASE_PASSWORD: "testTEST1"
    STS_METADATA_PATH: "/app/conf/sts_metadata.test.xml"
    
    STATISTICS_ENABLE: "true"
    PULL_ENABLE: "true"
    CRON_ENABLE: "true"
    
    CPR_PROXY_URL: ""
    CPR_LOCAL_COPY_FOLDER: ""
    CPR_SUBSCRIPTION_ENABLE: "true"
    CPR_ENCRYPTION_KEY_FILE: "/tmp/test_cpr_key.json"
    CPR_TEST_PERSON_LIST: > 
      0112977724,0101570010,0101570088,2505811057,0601980010,1105520049,0103897769,1102640019,
      0707610042,0902410058,2512474856,1509814844,2512052730,0601980029,3105841026,0101005038,1105801064,0312600013,
      2510202794,2501950079,0112947728,0101055035,0401570020,0206025050,0106664862,1105015018,0209025000,3105781007,
      2301175038,1502122777,0103232759,1502062774,0904410039,0708614866,2512484916,2509474829,3101827746,0101005089,
      1105550193,1111111111,1111111112,1111111113,1111111110,1211111111,
      1105550193,1111111111,1111111112,1111111113,3111171114,3111171115,3111171116,3111171117,0101704711,1304283824,
      1703501821,0202940001,0202940003,
      0104909995,0104909989,0107729995,0108589995,0108629996,0201609995,0201609996,0201919990,0201919995,0201919996,
      0211223989,0212159995,0504909989,0504909995,0505059996,0505109990,0505159995,0505209996,0506889996,1007059995,
      1110109996,1310169995,1310169996,1502779995,1502799995,1502829995,1509819996,2103009996,2311143995,2509479989,
      2512489996,2911829996,3001749995,3103979995
    
    CVR_DEMO_COMPANYFILE: "classpath:company_in.json"
    CVR_DEMO_UNITFILE: "classpath:unit.json"
    CVR_DEMO_PARTICIPANTFILE: "classpath:person.json"
    CVR_LOCAL_COPY_FOLDER: ""
    GEO_LOCAL_COPY_FOLDER: ""
    
    ERRORFILE_DIR: "cache/log"

  tags:
    - docker
  services:
    - name: ${DAFOSQL_IMAGE_SHA}
      alias: datafordeler-db


#test-core:
#  <<: *test-default
#  before_script:
#    - cd /code/core
#  script:
#    - mvn --batch-mode test
#  artifacts:
#    reports:
#      junit:
#        - /code/core/target/surefire-reports/*.xml

test-cpr:
  <<: *test-default
  before_script:
    - cd /code/plugin/cpr
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit:
        - /code/plugin/cpr/target/surefire-reports/TEST-*

test-cvr:
  <<: *test-default
  before_script:
    - cd /code/plugin/cvr
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit: target/surefire-reports/*.xml

test-eboks:
  <<: *test-default
  before_script:
    - cd /code/plugin/eboks
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit:
        - /code/plugin/eboks/target/surefire-reports/*.xml

test-eskat:
  <<: *test-default
  before_script:
    - cd /code/plugin/eskat
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit:
        - /code/plugin/eskat/target/surefire-reports/*.xml

test-geo:
  <<: *test-default
  before_script:
    - cd /code/plugin/geo
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit:
        - /code/plugin/geo/target/surefire-reports/*.xml

test-ger:
  <<: *test-default
  before_script:
    - cd /code/plugin/ger
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit:
        - /code/plugin/ger/target/surefire-reports/*.xml

test-prisme:
  <<: *test-default
  before_script:
    - cd /code/plugin/prisme
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit:
        - /code/plugin/prisme/target/surefire-reports/*.xml

test-combinedPitu:
  <<: *test-default
  before_script:
    - cd /code/plugin/combinedPitu
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit:
        - /code/plugin/pituCombined/target/surefire-reports/TEST-*.xml

test-statistik:
  <<: *test-default
  before_script:
    - cd /code/plugin/statistik
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit:
        - /code/plugin/statistik/target/surefire-reports/*.xml

test-subscription:
  <<: *test-default
  before_script:
    - cd /code/plugin/subscription
  script:
    - mvn --batch-mode test
  artifacts:
    reports:
      junit: /code/plugin/subscription/target/surefire-reports/*.xml

 # Release stage
 ###############
 
.release:
  stage: release
  image: alpine
  needs: ["test-core", "test-cpr", "test-cvr", "test-eboks", "test-eskat", "test-geo", "test-ger", "test-prisme", "test-combinedPitu", "test-statistik","test-subscription"]
  variables:
    GIT_STRATEGY: none # We do not need the source code
  before_script:
    - apk add skopeo

Release Datafordeler image:
  extends:
    - .rules:semver-all
    - .release
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${DAFO_IMAGE_SHA}"
      "docker://${DAFO_IMAGE_TAG}"

# TODO: Remove when no longer needed
Release Datafordeler-test-db image:
  extends:
    - .rules:semver-all
    - .release
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${DAFOSQL_IMAGE_SHA}"
      "docker://${DAFOSQL_IMAGE_TAG}"


# Configure stage
#################

Configure Test:
  stage: configure
  extends:
    - .rules:semver-all
    - .config:endpoint-with-tag
  needs: ["Release Datafordeler image", "Release Datafordeler-test-db image"]
  variables:
    ENDPOINT: datafordeler/salt/update-test

Configure Production:
  stage: configure
  extends:
    - .rules:semver-core
    - .config:endpoint-with-tag
  needs: ["Release Datafordeler image", "Release Datafordeler-test-db image"]
  variables:
    ENDPOINT: datafordeler/salt/update-production


# Deploy stage
##############

Deploy Test 1:
  stage: deploy
  when: manual
  extends:
    - .rules:semver-all
    - .saltbert
  needs: ["Release Datafordeler image", "Release Datafordeler-test-db image", "Configure Test"]
  variables:
    SALTBERT_ORCHESTRATION: groenland.datafordeler.service-test-1
    SALTBERT_URL: https://saltmaster.groenland.magentahosted.dk
  environment:
    name: test
    url: "https://test.data.gl"

Deploy Test 2:
  stage: deploy
  when: manual
  extends:
    - .rules:semver-all
    - .saltbert
  # Depend on test 1, so we only have one server down at a time
  # It needs to be checked that service 1 is up & running before taking down service 2
  needs: ["Release Datafordeler image", "Release Datafordeler-test-db image", "Configure Test", "Deploy Test 1"]
  variables:
    SALTBERT_ORCHESTRATION: groenland.datafordeler.service-test-2
    SALTBERT_URL: https://saltmaster.groenland.magentahosted.dk
  environment:
    name: test
    url: "https://test.data.gl"

Deploy Production 1:
  stage: deploy
  when: manual
  extends:
    - .rules:semver-core
    - .saltbert
  needs: ["Release Datafordeler image", "Configure Production"]
  variables:
    SALTBERT_ORCHESTRATION: groenland.datafordeler.service-prod-1
    SALTBERT_URL: https://saltmaster.groenland.magentahosted.dk
  environment:
    name: production
    url: "https://data.gl"

Deploy Production 2:
  stage: deploy
  when: manual
  extends:
    - .rules:semver-core
    - .saltbert
  # Depend on test 1, so we only have one server down at a time
  # It needs to be checked that service 1 is up & running before taking down service 2
  needs: ["Release Datafordeler image", "Configure Production", "Deploy Production 1"]
  variables:
    SALTBERT_ORCHESTRATION: groenland.datafordeler.service-prod-2
    SALTBERT_URL: https://saltmaster.groenland.magentahosted.dk
  environment:
    name: production
    url: "https://data.gl"
