# This example file contains configuration examples for how to set up the
# DAFO data service.
# To make use of custom local settings while launching the project from
# IntelliJ add the following to program arguments in the run configuration
# used to start the project:
#   --spring.config.location="classpath:/application.properties,file:$MODULE_DIR$/local_settings.properties"


# Define the port that the service will listen on
server.port = 443

dafo.server.name=dafo01

# Folder to look for plugin jars in
dafo.plugins.folder=../plugins/jar

# Define SSL keystores for tomcat HTTPS
server.ssl.key-store=C:/some/folder/https_keystore.jks
server.ssl.key-store-password=keystorepassword
server.ssl.key-alias=keyalias
server.ssl.key-password=keypassword
server.ssl.enabled=true

# Configuration file for primary database connection, eg. the DAFO database
dafo.hibernate.configuration-file=file:c:/some/dir/hibernate.cfg.xml

# Configuration file for secondary database connection, eg. the DAFO ADMIN database
dafo.hibernate.secondary-configuration-file=file:c:/some/other/dir/dafoadmin_hibernate.cfg.xml

# User database connection.
# This specifies the connection URL and credentials used to connect to the
# SQL Server database containing the user data administered in DAFO Admin.
# If integratedSecurity=true is specified in the URL windows will make use of
# the credentials used to launch the service, and it is not neccesary to
# specify username and password. If integratedsecurity is not used it will be
# neccessary to provide a username and password with access to the specified
# database.
# If the user database is not enabled, dummy userdata will be used instead of
# lookups in the database. This is mostly needed in the context of testing.
dafo.userdatabase.enabled=true
dafo.userdatabase.url=jdbc:sqlserver://localhost;databaseName=dafo_data;IntegratedSecurity=true
dafo.userdatabase.username=
dafo.userdatabase.password=

# The XML metadata from the STS server we trust.
# This can be fetched from the STS server on the URL
# https://<sts-server-hostname>/get_metadata.
dafo.tokenvalidation.issuer-metadata-path=C:/some/folder/sts_metadata.xml

# How many seconds of time skew to allow when checking token timestamps.
dafo.tokenvalidation.time-skew-in-seconds=5

# What is the maximum allowed lifetime of a token
dafo.tokenvalidation.max-assertion-time-in-seconds=3600

# Which audience URI do we expect tokens to have
dafo.tokenvalidation.audience-URI=https://dafo.example.com/


# Whether this server is the on to process cron jobs
dafo.cron.enabled=true

# Enable pulling. Only one server in the cluster should have this to true,
# since that server will populate the database for all to use
dafo.pull.enabled=true

# Enable scheduled dump jobs, i.e. file extraction
# Likewise, only one server per cluster
dafo.dump.enabled=true

# Proxy server to use for FTP access to CPR servers
dafo.cpr.proxy-url=

# Local folder to store CPR files in.
# The contents of this folder is very important; when pulling, any files that
# are found on the remote server, but not found here, will be downloaded and
# parsed
dafo.cpr.local-copy-folder=C:/some/folder/cpr/download

# Enable subscription for Person loading in CPR: When importing, detect people
# not living in Greenland, and tell CPR that we want to subscribe to changes on
# this person
# Since the results of the subscription is global, applying to all servers that
# are fetching from the same source, only one server should have this set.
# That is, only *one* server out of *all* servers listening to the CPR source.
dafo.cpr.person.subscription-enabled=false

# Where to store locally generated Person subscription files. Not particularly
# important, the files are mostly there for later inspection when debugging.
dafo.cpr.person.local-subscription-folder=C:/some/folder/cpr/upload/person

# Customer ID as assigned by CPR. A four-digit number
dafo.cpr.person.customer-id=

# Job ID as assigned by CPR. A six-digit number. This is usually the
# customer ID followed by 01
dafo.cpr.person.jobid=

# Cron schedule for running the "upload new subscription file to CPR" job
dafo.cpr.person.subscription.generate-schedule=0 4 * * *

# Location of the error log used for monitoring. The value *must* match the
# "monitorfile" property in log4j2.xml
dafo.error_file=cache/log/dafo.err

# Whitelisting of incoming connections: By IP, by client certificate DN and by DN of signing CA for the client
# certificate.
#
# This is used to whitelist who can connect to protected services. It follows the following rules:
# * Only IP adresses listed in ip.whitelist are allowed to connect.
#   This entry should contain the IP adresses of any forward-proxies that handles HTTPS termination and client
#   certificate validation for the service.
#   It is also a good idea to add local adresses (127.0.0.1 and IP of primary network interface) to allow debugging
#   non-restricted services from the server running the application.
# * Connections using a client certificate (eg. from Pitu) must have both their own DN and the DN of their
#   signing CA verified:
# ** Client certificates that does not have their DN in pitu.idn.whitelist will be blocked
# ** Client certificates that does not have the DN of their CA in pitu.sdn.whitelist will be blocked
#
# Each list is specified as a comma separated list of values.
#
# ip.whitelist=
# pitu.idn.whitelist=
# pitu.sdn.whitelist=
