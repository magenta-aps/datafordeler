# This example file contains configuration examples for how to set up the
# DAFO STS SAML service.
# To make use of custom local settings while launching the project from
# IntelliJ add the following to program arguments in the run configuration
# used to start the project:
#   --spring.config.location="classpath:/application.properties,file:$MODULE_DIR$/local_settings.properties"

# SQL Server connection.
# This specifies the connection URL and credentials used to connect to the
# SQL Server database containing the user data administered in DAFO Admin.
# If integratedSecurity=true is specified in the URL windows will make use of
# the credentials used to launch the service, and it is not neccesary to
# specify username and password. If integratedsecurity is not used it will be
# neccessary to provide a username and password with access to the specified
# database.
spring.datasource.url=jdbc:sqlserver://localhost;databaseName=dafo_users;integratedSecurity=true
spring.datasource.username=
spring.datasource.password=

# Configuration of issued tokens

# The Identity-ID used to issue tokens with.
dafo.sts.issuer-entity-id=Example-Dafo-STS

# Identity-ID again, this time for when we generate IdP metadata
dafo.sts.identity-id=Example-Dafo-STS

# The audience URL used in all tokens
dafo.sts.audience-url=https://dafo.example.com/

# The public root URL of the STS server, used when generating IdP metadata
dafo.sts.server-root-url=https://sts.dafo.example.com/

# Location of the metadata for the DAFO IdP
# This is a legacy option that is supposed to be removed. It is recommended to
# point it to a metadata file with an outdated certificate so that no clients
# can authenticate with the IdP data from this file.
dafo.sts.dafo-idp-metadata-location=file:C:/some/folder/dafo_idp_metadata.xml

# The lifetome of issued tokens, in seconds
dafo.sts.token-lifetime-in-seconds=3600

# A public/private key pair used for signing SAML messages
# Key must be stored in pkcs8 format.
# A key in the correct format can be generated from a key in PEM format with
# the following openssl command:
#  openssl pkcs8 -topk8 -inform PEM -outform DER -in signing.key \
#    -out signing.key.der.pkcs8 -nocrypt
dafo.sts.private-key-der-location=file:C:/some/path/signing.key.der.pkcs8
dafo.sts.public-key-pem-location=file:C:/some/path/signing.crt

# HTTPS configuration
# See the general spring boot documentation for how to set these options.
# When running in a development setup it might be a good idea to change the
# https port to something else than 443.
server.ssl.key-store=file:C:/some/folder/https_certificate.jks
server.ssl.key-store-password=storepassword
server.ssl.key-alias=aliasname
server.ssl.key-password=keypassword
server.ssl.enabled=true
server.port=443
